---
title: "AS_TNFi_IL17i"
author: "wg"
date: '221117'
output: R_script
---
  
  ```
getwd()
setwd("/home/users/songwoogil/AS_Therapy")

SO.tot <- readRDS("~/AS_Therapy/seurat_object.rds")

# Pre-setting
install.packages('Seurat')
library(Seurat)
library(dplyr)
library(ggplot2)
library(ComplexHeatmap)
library(circlize)
library(monocle3)
library(magrittr)
library(tidyr)
library(ggpubr)
library(tibble)
library(SeuratWrappers)
library(sctransform)
# if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# BiocManager::install("glmGamPoi")
library(glmGamPoi)
library(ggpubr)
library(pheatmap)
library(stringr)
library(viridisLite)
library(viridis) # required viridisLite

library(tidyverse)




# Quickly preview the metadata
head(x = SO.tot[[]])
# Create a new metadata column called "y" with the contents of "x"
SO.tot$ident.status <- SO.tot$status
SO.tot$ident.drug <- NA
SO.tot$ident.sample <- SO.tot$sample
SO.tot$ident.name <- SO.tot$patient
SO.tot$status <- NULL
SO.tot$sample <- NULL
SO.tot$patient <- NULL

# insert metadata
SO.tot$ident.status[SO.tot$ident.status == "1mo"] <- "TNFi"
SO.tot$ident.status[SO.tot$ident.status == "base"] <- "Bf_TNFi"
SO.tot$ident.status[SO.tot$ident.status == "IL17_1mo"] <- "IL17i"
SO.tot$ident.status[SO.tot$ident.status == "IL17_base"] <- "Bf_IL17i"

SO.tot.harmony$ident.status[SO.tot.harmony$ident.status == "TNFi"] <- "Af_TNFi"
SO.tot.harmony$ident.status[SO.tot.harmony$ident.status == "base"] <- "Bf_TNFi"
SO.tot.harmony$ident.status[SO.tot.harmony$ident.status == "IL17i"] <- "Af_IL17i"
SO.tot.harmony$ident.status[SO.tot.harmony$ident.status == "IL17_base"] <- "Bf_IL17i"

#
SO.tot$ident.drug[SO.tot$ident.status == "TNFi"] <- "TNFi"
SO.tot$ident.drug[SO.tot$ident.status == "Bf_TNFi"] <- "TNFi"
SO.tot$ident.drug[SO.tot$ident.status == "IL17i"] <- "IL17i"
SO.tot$ident.drug[SO.tot$ident.status == "Bf_IL17i"] <- "IL17i"
table(SO.tot$ident.drug)


# QC metrics and filter cells
SO.tot[["percent.mt"]] <- PercentageFeatureSet(SO.tot, pattern = "^MT-")
VlnPlot(SO.tot, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0, group.by = "orig.ident")

qVlnPlot <- function(object){
  print(VlnPlot(object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0, group.by = "ident.name"))
  print(VlnPlot(object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0, group.by = "ident.status"))
  print(VlnPlot(object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0, group.by = "TNFi_respond"))
  print(VlnPlot(object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0, group.by = "ident.drug"))
}
VlnPlot(SO.tot, features = c("nFeature_RNA", "nCount_RNA"), pt.size = 0, group.by = "ident.name")
VlnPlot(SO.tot, features = "percent.mt", pt.size = 0, group.by = "ident.name")
VlnPlot(SO.tot, features = "nCount_RNA", pt.size = 0, group.by = "ident.sample") + NoLegend()

pdf("pdf/20221115_quality.pdf", width = 28)

qVlnPlot(SO.tot)

Idents(SO.tot) <- 'ident.name'
levels(SO.tot)
SO1 <- subset(SO.tot, idents = c("AJH", "AWJ"))
SO2 <- subset(SO.tot, idents = c("BKJ_KGK_JES_1", "BKJ_KGK_JES_2", "BKJ_KGK_JES_3",
                                 "CHJ_KYH_KKW_1", "CHJ_KYH_KKW_2", "CHJ_KYH_KKW_3"))
SO3 <- subset(SO.tot, idents = "JYC")
SO4 <- subset(SO.tot, idents = "PHS")
SO5 <- subset(SO.tot, idents = "PJH")
SO6 <- subset(SO.tot, idents = "SMH")



def.off()


Idents(SO.tot) <- "ident.sample" 
levels(SO.tot)
FeatureScatter(SO.tot, feature1 = "nCount_RNA", feature2 = "percent.mt", pt.size = 0.01) +
  ylim(0,15) +
  xlim(0,40000) +
  geom_hline(yintercept = c(0.5,10), linetype = "dashed") + NoLegend()

FeatureScatter(SO.tot, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", pt.size = 0.01) + 
  ylim(0,5000) +
  xlim(0,30000) +
  geom_hline(yintercept = c(500, 3300), linetype = "dashed")+
  geom_vline(xintercept = c(1000, 12000), linetype = "dashed") + NoLegend()

FeatureScatter(SO.tot, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 5000), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 10), linetype = "dashed")  + NoLegend()

SO.tot.filtered <- subset(SO.tot, nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt <10)
SO.tot.filtered <- subset(SO.tot, subset = nFeature_RNA > 500 & nFeature_RNA < 2800)

SO.tot <- SO.tot.filtered
rm(SO.tot.filtered)
```


FeatureScatter(SO1, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 3000), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 8), linetype = "dashed") # AWJ, AJH 

FeatureScatter(SO2, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 2500), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 8), linetype = "dashed") # CHJ_KYH_KKW, BKJ_KGK_JES

Idents(SO3) <- 'ident.name'
FeatureScatter(SO3, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 3000), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 8), linetype = "dashed") # JYC

FeatureScatter(SO4, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 3000), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 6), linetype = "dashed") # PHS

FeatureScatter(SO5, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 1800), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 10), linetype = "dashed") # PJH

FeatureScatter(SO6, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(400, 2500), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 7), linetype = "dashed") # SMH

FeatureScatter(SO7, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 2200), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 9), linetype = "dashed") # SMS

FeatureScatter(SO8, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(500, 2200), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 6), linetype = "dashed") # SYT

FeatureScatter(SO.9, feature1 = "percent.mt", feature2 = "nFeature_RNA", pt.size = 0.1) + 
  ylim(0,10000) +
  xlim(0,15) +
  geom_hline(yintercept = c(200, 2500), linetype = "dashed") +
  geom_vline(xintercept = c(0.5, 9), linetype = "dashed") 


#
levels(SO.tot)
Idents(SO.tot) <- 'ident.name'
SO.tot <- merge(SO1, y = c(SO2, SO3, SO4, SO5, SO6, SO7, SO8, SO.9),
                merge.data = TRUE,
                merge.dr = NULL)
rm(SO1, SO2, SO3, SO4, SO5, SO6, SO7, SO8, SO.9)

save.image("~/AS_Therapy/script/221125_after merge.RData")
WhichCells(test.sct, expression = FOXP3 >0)

SO.tot.filtered <- subset(SO.tot, nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt <10)
SO.tot.filtered <- subset(SO.tot, subset = nFeature_RNA > 500 & nFeature_RNA < 2800)

#
test <- SO.tot %>%
  NormalizeData %>%
  FindVariableFeatures %>%
  ScaleData(vars.to.regress = c("percent.mt", "nCount_RNA")) %>%
  RunPCA %>%
  FindNeighbors %>%
  FindClusters %>%
  RunUMAP(dims= 1:20)
save.image("~/AS_Therapy/script/221125_test standard.RData")

DimPlot(test)
DimPlot(test, split.by = 'ident.name', ncol = 5)
DimPlot(test, split.by = 'ident.status')

Idents(test) <- 'TNFi_respond'
test.good <- subset(test, idents = 'good')
DimPlot(test.good, split.by = 'ident.sample', ncol =6)
DimPlot(test.good, split.by = 'ident.name', ncol =6)

ElbowPlot(test, ndims = 50)


save.image("~/AS_Therapy/script/221125_after sct.RData")

library(harmony)
test.harmony <- test.sct %>%
  RunHarmony("ident.name", assay.use="SCT")

# UMAP and clustering with harmonized PCs
test.harmony <- RunUMAP(test.harmony, reduction='harmony', dims = 1:30) # 1:30 → 1:35
test.harmony <- FindNeighbors(test.harmony, reduction='harmony')
test.harmony <- FindClusters(test.harmony, resolution = 0.5) # 0.3 → 0.1

save.image("~/AS_Therapy/script/221125_after harmony.RData")

#save
saveRDS(seurat_obj, file=paste0(out_data_dir, 'seurat_object_sct_harmony.rds'))
p5 <- DimPlot(test.sct, group.by = 'ident.status', reduction = 'umap') + ggtitle('before harmony')
p6 <- DimPlot(test.harmony, group.by = 'ident.status', reduction = 'umap') + ggtitle('after harmony')
CombinePlots(list(p5, p6))
# Before correction
DimPlot(test.sct, reduction = 'umap')
DimPlot(test.sct, split.by = 'ident.name', reduction = 'umap', ncol = 5) + NoLegend()
# Afeter correction
DimPlot(test.harmony, reduction = 'umap', label = T) + NoLegend()



p1 = FeaturePlot(HCCharmony, features = list.rna, reduction="umap", ncol=5, 
                 cols = c('#0C5DA5', '#FF9500'), min.cutoff = 0, max.cutoff = 1.5, combine = FALSE)

for(i in 1:length(p1)) {
  p1[[i]] <- p1[[i]] + NoLegend() + theme(axis.text.x = element_blank(),
                                          axis.text.y = element_blank(),
                                          axis.title.x.bottom = element_blank(),
                                          axis.title.y = element_blank(),
                                          axis.ticks.x = element_blank(),
                                          axis.ticks.y = element_blank(),
                                          axis.line.x = element_blank(),
                                          axis.line.y = element_blank())
  
}

pdf("pdf/20221117_harmony_selected_feature.pdf")
cowplot::plot_grid(plotlist = p1,ncol = 6)
dev.off()


# Quickly preview the metadata
head(x = SO.tot[[]])
# Create a new metadata column called "y" with the contents of "x"
SO.tot$ident.status <- SO.tot$status
SO.tot$ident.drug <- NA
SO.tot$ident.sample <- SO.tot$sample
SO.tot$ident.name <- SO.tot$patient
SO.tot$status <- NULL
SO.tot$sample <- NULL
SO.tot$patient <- NULL

# insert metadata
SO.tot$ident.status[SO.tot$ident.status == "1mo"] <- "TNFi"
SO.tot$ident.status[SO.tot$ident.status == "base"] <- "Bf_TNFi"
SO.tot$ident.status[SO.tot$ident.status == "IL17_1mo"] <- "IL17i"
SO.tot$ident.status[SO.tot$ident.status == "IL17_base"] <- "Bf_IL17i"

#
SO.tot$ident.drug[SO.tot$ident.status == "TNFi"] <- "TNFi"
SO.tot$ident.drug[SO.tot$ident.status == "Bf_TNFi"] <- "TNFi"
SO.tot$ident.drug[SO.tot$ident.status == "IL17i"] <- "IL17i"
SO.tot$ident.drug[SO.tot$ident.status == "Bf_IL17i"] <- "IL17i"
table(SO.tot$ident.drug)

# you want to put ID to cells according to specific markers.
# command for each of your markers in your feature plot. After that, you will be able to perform Differential Analysis between those cells IDs.
MS4A1_marker <- WhichCells(object = pbmc, expression = MS4A1 > 0.5)
pbmc <- SetIdent(object = pbmc, cells = MS4A1_marker , value =
                   'MS4A1 positive cells')



DefaultAssay(test.harmony) <- "SCT"
MtP.1 <- c("CD14", "HLA-DRB1", "CD3E", "NCAM1", "CD19", "ITGAX", "TIFAB", "HBB", "PPBP")
FeaturePlot(test.harmony, features = "percent.mt", min.cutoff = "q9")
FeaturePlot(test.harmony, features = MtP.mitotic, min.cutoff = "q9")

NvM.data <- DotPlot(MM.u, features = MtP.NvM, cols = c("blue", "red"), dot.scale = 8) +
  RotatedAxis()
mitotic.data <- DotPlot(test.harmony, features = MtP.mitotic, cols = c("blue", "red"), dot.scale = 8) +
  RotatedAxis() 
DotPlot(test.harmony, features = c("CD14", "HLA-DRB1", "CD3E", "NCAM1", "CD19", "ITGAX", "TIFAB", "HBB", "PPBP"),
        cols = c("lightgrey", "red"),split.by = 'ident.study', dot.scale = 8)+
  RotatedAxis()
DotPlot(test.harmony, features = tutorial.mk, cols = c("lightgrey", "red"), dot.scale = 8)+
  RotatedAxis()


MtP.mitotic <- c("TCF7", "CDKN1A")
FeaturePlot(MM.u, features = "percent.mt")

goi = c("CD3D","CD4","KRT7",
        "PTPRC","CD1A","DNTT",
        "CD3E","GZMB",
        "CD68","IFNG", "CD79A")
FeaturePlot(AS,features = goi,ncol=3)
FeaturePlot(test.harmony, features = tutorial.mrk, ncol = 5)


Idents(test.harmony)
table(Idents(test.harmony))

DotPlot(test.harmony, features = tutorial.mk, cols = c("lightgrey", "red"), dot.scale = 8) +
  RotatedAxis()


### 다시 SO 분석

DefaultAssay(SO.tot.harmony) <- 'RNA'
SO.tot.harmony <- NormalizeData(SO.tot.harmony)
FeaturePlot(SO.tot.harmony, features = tutorial.mk, ncol= 5)
DotPlot(SO.tot.harmony, features = tutorial.mk, cols = c("lightgrey", "red"), dot.scale = 8) +
  RotatedAxis()
DotPlot(SO.tot.harmony, features = MtP.1, cols = c("lightgrey", "red"), dot.scale = 8) +
  RotatedAxis()
FeaturePlot(SO.tot.harmony, features = MtP.1, ncol = 5)


Idents(test) <- 'manual_clusters'
DimPlot(test, label=T)

FeaturePlot(test.harmony, features = c("TCF7", "CDKN1A", "MKI67", "CACYBP"), ncol = 1)
Idents(test.harmony) <- 'manual_clusters'
levels(test.harmony)

rm(SO.spare, SO.tot.filtered, test, test.sct)
SO.tot.harmony <- test.harmony
rm(test.harmony)
save.image("~/AS_Therapy/script/221126_annotation_after_harmony.RData")

Idents(SO.tot.harmony) <- 'manual_clusters'
DimPlot(SO.tot.harmony, reduction = 'umap', label = T) + NoLegend()

a <- WhichCells(object = SO.tot.harmony, idents = "pDC")
DimPlot(SO.tot.harmony, cells = a, reduction = 'umap')
FeaturePlot(SO.tot.harmony, cells = a, features = c("TSPAN13", "IL3RA", "IGJ"))

test <- FindClusters(SO.tot.harmony, resolution = 0.8)
DimPlot(test, label = T)
DotPlot(test, features = tutorial.mrk, cols = c("lightgrey", "red"), dot.scale = 8) +
  RotatedAxis()

a <- WhichCells(test, idents = '18')
DimPlot(test, cells = a, reduction = 'umap')
b <- FindMarkers(test, ident.1 = 'Almost CD14 Mono', ident.2 = 'CD14 Mono', min.pct = 0.25, max.cells.per.ident = 10000)
head(b, n=10)
FeaturePlot(test, cells = a, features = c("GNLY", "GZMA", "FGFBP2"))
FeaturePlot(test, features = c("GNLY", "GZMA", "FGFBP2"))

c <- WhichCells(test, idents = 'Mono/Mk Dbl')
FeaturePlot(test, cells = c, features = c("S100A9", "PPBP", "GNG11"))

DimPlot(SO.tot.harmony, label = T, order = order.tot)


test$manual_clusters <- factor(test$manual_clusters,
                               levels = c("Mk", "Mono/Mk Dbl", "RBC", "pDC", "DC", "CD16 Mono, HLPH1 hi", "CD14 Mono",
                                          "NK", "B cell", "T cell"))
SO.tot.harmony$ident.status <- factor(SO.tot.harmony$ident.status,
                                      levels = c("Bf_TNFi", "TNFi", "Bf_IL17i", "IL17i"))
SO.tot.harmony$ident.drug <- factor(SO.tot.harmony$ident.drug,
                                    levels = c("TNFi", "IL17i"))
levels(SO.tot.harmony$ident.status)

order.tot <- c("Mk", "Mono/Mk Dbl", "RBC", "pDC", "DC", "CD16 Mono, HLPH1 hi", "CD14 Mono",
               "NK", "B cell", "T cell")
Idents(test) <- 'manual_clusters' 
DimPlot(test, reduction = 'umap', order = c("Uncategorized", "Rapidly proliferating", "NK",
                                            "Gamma-Delta/MAIT", "CD8, naive", "CD8, memory",
                                            "CD4, Treg", "CD4, naive","CD4, memory")) 

BiocManager::install("dittoSeq")
library(dittoSeq)
dittoBarPlot(
  object = SO.tot.harmony,
  var = "ident.name",
  group.by = "manual_clusters", retain.factor.levels = T)
dittoBarPlot(
  object = SO.tot.harmony,
  var = "manual_clusters",
  group.by = "ident.sample", retain.factor.levels = T)
dittoBarPlot(SO.tot.harmony, var = "manual_clusters", group.by = "ident.status", retain.factor.levels = T)
dittoBarPlot(SO.tot.harmony, var = "manual_clusters", group.by = "TNFi_respond", retain.factor.levels = T)
dittoBarPlot(SO.tot.harmony, var = "manual_clusters", group.by = "ident.drug", retain.factor.levels = T)

# 
#basic plot of clusters by replicate
ggplot(object@meta.data, aes(x=res.1, fill=replicate)) + geom_bar()

#set the order of clusters in dataset w 30 clusters
factor(object@meta.data$res.1, levels=c(seq(0,30)))
object@meta.data$res.1 <- factor(object@meta.data$res.1, levels=c(seq(0,30)))
ggplot(object@meta.data, aes(x=res.1, fill=replicate)) + geom_bar()

#set custom order to dataset w 30 clusters
my_levels <- c(26,4,10,13,25,27,18,8,6,12,20,7,5,17,23,1,2,3,9,11,24,28,0,14,22,29,16,19,21,15,30)
factor(object@meta.data$res.1, levels= my_levels)
object@meta.data$res.1 <- factor(object@meta.data$res.1, levels= my_levels)
ggplot(object@meta.data, aes(x=res.1, fill=replicate)) + geom_bar()

#plot as proportion or percentage of cluster
ggplot(object@meta.data, aes(x=res.1, fill=replicate)) + geom_bar(position = "fill")

####
DimPlot(SO.tot.harmony)




### Doublet
## pK Identification (no ground-truth) ---------------------------------------------------------------------------------------
test1 <- SO.tot.harmony
sweep.res.list_test1 <- paramSweep_v3(SO.tot.harmony, PCs = 1:20, sct = TRUE) 

library(ROCR)
sweep.stats_test1 <- summarizeSweep(sweep.res.list_test1, GT = FALSE)
bcmvn_test1 <- find.pK(sweep.stats_test1)
# Bimodality coefficient
ggplot(bcmvn_test1, aes(pK, BCmetric, group = 1)) +
  geom_point() +
  geom_line()

pK <- bcmvn_test1 %>% # select the pK that corresponds to max bcmvn to optimize doublet detection
  filter(BCmetric == max(BCmetric)) %>%
  select(pK) 
pK <- as.numeric(as.character(pK[[1]]))
# optimal pK 0.80 나옴

## Homotypic Doublet Proportion Estimate -------------------------------------------------------------------------------------
annotations <- test1@meta.data$seurat_clusters
homotypic.prop <- modelHomotypic(annotations)           ## ex: annotations <- seu_kidney@meta.data$ClusteringResults
nExp_poi <- round(0.076*nrow(test1@meta.data))  ## Assuming 7.5% doublet formation rate - tailor for your dataset
nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))


# run doubletFinder 
test1 <- doubletFinder_v3(test1,PCs = 1:20, 
                          pN = 0.25, 
                          pK = pK, 
                          nExp = nExp_poi.adj, 
                          reuse.pANN = FALSE, sct = TRUE) 

# visualize doublets
p1 <- DimPlot(test1, reduction = 'umap', label = TRUE)
p2 <- DimPlot(test1, reduction = 'umap', group.by = "DF.classifications_0.25_0.22_1428") 
CombinePlots(list(p1, p2))

# number of singlets and doublets
table(test1@meta.data$DF.classifications_0.25_0.22_1428)

# re-analysis after excluding doublets
Idents(test1) <- "DF.classifications_0.25_0.22_1428"
test1.sng <- subset(test1,idents = "Singlet")




